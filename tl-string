#!/bin/bash
# insert or update strings.xml in batch, this script
# should excuted in the root directory of Project, and
# the every line of input file must contains string name
# and string value which seperated by empty space.
# e.g.
#    #values
#      lock_screen Lock Sreen
#      ...
#   #values-ja
#       pulse_speed_very_fast 非常に速い
#      ...
#
# WARNING: 1. the string value embraced by blank space will be trimmed.
# 2. the string contains quotes will be ignore, you must add slash before it, e.g. \"

export PATH

STRING_UPDATED_ERROR_LOG='/tmp/string-updated-error.log'
STRING_UPDATED_IGNORE_LOG='/tmp/string-updated-ignore.log'

#--------------------------------------------------------------------------------------
#
#    $1: file name
#    $2: line num
#    $3: one line text to be update to the $2 line in file $1
#
function updateLine(){
    #add four empty char at the front of line, just like tab
    if test $stringSpaces -eq 4;then
        TARGET_STRING="    "$3
    else
        TARGET_STRING="  "$3
    fi
    TARGET_STRING=${TARGET_STRING//\\/\\\\}
    #echo "line:$2 , target string:"$TARGET_STRING

    CMD="$2c\\$TARGET_STRING"
    #echo "exec cmd: ${CMD}"
    
    sed -i "${CMD}" "$1"
    if test "$?" -gt 0;then
        echo "String updated failed: $TARGET_STRING" >> $STRING_UPDATED_ERROR_LOG
    fi
}


#--------------------------------------------------------------------------------------
#    $1 file name
#    $2 text line to be appended at last of string file, e.g. <string name="static_ip_address">"固定IPアドレス"</string>
function appendString() {
    local targetFile="$1"
    local newString="$2"
    local lastStringLineNumber=`grep -n '</resources>' $targetFile | cut -d ':' -f 1`
    let lastStringLineNumber-=1
    if test $stringSpaces -eq 4;then
        TARGET_STRING="    "$newString
    else
        TARGET_STRING="  "$newString
    fi
    TARGET_STRING=${TARGET_STRING//\\/\\\\}
    CMD="${lastStringLineNumber}a\\${TARGET_STRING}"
    #echo "execute appendString: $CMD"
    sed -i "${CMD}" $targetFile
}

#--------------------------------------------------------------------------------------
# this method try comment special line
#    $1 filename
#    $2 line num
function commentLine(){
    CMD=$2"p"
    #echo "------------cmd: $CMD"

    TEXT=`sed -n $CMD $1`
    #echo "$TEXT"
    #trim first
    TEXT=`echo "$TEXT" | cut -d ' ' -f 5-`
    echo "$TEXT"
    #echo "-----------------$TEXT"
    COMMENT="<!--"${TEXT}"-->"
    updateLine $1 $2 "$COMMENT"
}

function getLineNumber() {
    local targetPattern="${1}"
    local targetFile="$2"
    ismulityString=`grep -n "${targetPattern}" $targetFile | grep -v "!--" | grep 'string'| wc -l`
    if test "$ismulityString" -gt 1;then
        echo "this name is a mulity string, should deleted:$targetPattern" >> $STRING_UPDATED_ERROR_LOG
    fi
    LINE_NUM=`grep -n "${targetPattern}" $targetFile | grep -v "!--" | grep 'string'| tail -1|cut -d ':' -f 1`
    #local number=`grep -n "${targetPattern}" "$targetFile" | grep -v "!--" | head -1 | cut -d ':' -f 1`
    return $number
}

#--------------------------------------------------------------------------------------
#
#    $1: the line to be handled, e.g. <string name="static_ip_address">"固定IPアドレス"</string>
#
function updateString() {

    local theStringNewLine="$1"
    STRING_NAME=`echo "$theStringNewLine" | cut -d "\"" -f 2`
    STRING_NAME="\"${STRING_NAME}\""
    #echo "string name: $STRING_NAME" line:$line
    tmp=$(echo "$theStringNewLine" | grep "^<string ")
    startWithString=$?
    if [ "$startWithString" -gt 0 ];then
        # remove the non string start line
        echo -e "${theStringNewLine}" >> $STRING_UPDATED_IGNORE_LOG
        return;
    fi
    
    local allAttr=`echo "$theStringNewLine" | cut -d '>' -f1 | cut -d ' ' -f2-`
    LINE_NUM=""
    if [ -f $SMARTISAN_STRING_FILE ]; then
        getLineNumber "${allAttr}" $SMARTISAN_STRING_FILE
    fi
    #echo "LINE_NUM: $LINE_NUM"
    if [ -z "$LINE_NUM" ]; then
        #echo "not found $STRING_NAME in file $SMARTISAN_STRING_FILE, try file $ANDROID_STRING_FILE..."
        getLineNumber "${allAttr}" $ANDROID_STRING_FILE
        if [ -z "$LINE_NUM" ]; then
            #echo "not found in $ANDROID_STRING_FILE also!"
            if [ -f $SMARTISAN_STRING_FILE ]; then
                echo "insert $theStringNewLine to file $SMARTISAN_STRING_FILE"
                appendString $SMARTISAN_STRING_FILE "$theStringNewLine"
            else
                #echo "insert $theStringNewLine to file $ANDROID_STRING_FILE"
                appendString $ANDROID_STRING_FILE "$theStringNewLine"
            fi

        else
            #echo "found $STRING_NAME at line $LINE_NUM in file $ANDROID_STRING_FILE"
            if [ -f $SMARTISAN_STRING_FILE ]; then
                commentLine $ANDROID_STRING_FILE $LINE_NUM
                appendString $SMARTISAN_STRING_FILE "$theStringNewLine"
            else
                updateLine $ANDROID_STRING_FILE "${LINE_NUM}" "$theStringNewLine"
            fi
        fi
    else
        #echo "found $STRING_NAME at line: $LINE_NUM in file $SMARTISAN_STRING_FILE"
        updateLine $SMARTISAN_STRING_FILE $LINE_NUM "$theStringNewLine"
    fi
}

function generateResDir() {
    local resDir=$1
    if [ ! -d "$resDir" ];then
        echo -e "generated the resource directory:" $resDir
        mkdir -p "$resDir"
    fi
}


#--------------------------------------------------------------------------------------
#main
if(( $# < 1 )); then
    echo "error: need translation input file. "
    exit -1
fi


if [ ! -f $1 ]; then
    echo "input file $1 not exists, operation failed!!!"
    exit -1
fi

VALUE_DIR=values

stringSpaces=4
if test ! -z "$2";then
    stringSpaces=$2
fi

if [ ! -f $STRING_FILE ]; then
    echo "string xml file $STRING_FILE not exists, operation failed!!!"
    exit -1
fi

# clear the ^M at the end of line
sed -i 's/\r//g' "$1"
sed -i "s/><\!--/>\r\n    <\!--/g" "$1"
sed -i "s/--></-->\r\n</g" "$1"
echo -e "format handled successed, String update running...\n"
echo `date` > $STRING_UPDATED_IGNORE_LOG
echo `date` > $STRING_UPDATED_ERROR_LOG

isAndroidResDir=""
while read -r line || [ -n "$line" ]
do
    #echo "$line"
    if [ -z "$line" ]; then
        #echo "empty char, just continue"
        continue
    fi

    KEY=`echo "$line" | cut -d ' ' -f 1`
    #echo -e "wtf key=$KEY"

    case $KEY in
    [#]values) VALUE_DIR=values
        #echo -e "\n$KEY"
        continue
        ;;
    [#]values-zh-rTW) VALUE_DIR=values-zh-rTW
        #echo -e "\n$KEY"
        continue
        ;;
    [#]values-zh-rCN) VALUE_DIR=values-zh-rCN
        continue
        ;;
    [#]values-*)
        #echo -e "\n$KEY"
        resDir=`echo "$KEY" | cut -d '#' -f2`
        generateResDir "res/$resDir"
        VALUE_DIR=$resDir
        continue
        ;;
    [#]android-values-*)
        isAndroidResDir=true
        resDir=`echo "$KEY" | cut -d '#' -f2 | cut -d '-' -f2-`
        generateResDir "android_res/$resDir"
        VALUE_DIR=$resDir
       ;;
    [#]*)
        echo "jump comment line $KEY"
        continue
        ;;
    *)
    ;;
    esac


    #echo "current line: $line"
    #echo "-------------add string"
    #echo "current dir:"$VALUE_DIR", line:"$line


    ANDROID_STRING_FILE="res/$VALUE_DIR/strings.xml"
    SMARTISAN_STRING_FILE="res/$VALUE_DIR/smartisan_strings.xml"

    if test "$isAndroidResDir" = "true";then
        ANDROID_STRING_FILE="android_res/$VALUE_DIR/strings.xml"
        SMARTISAN_STRING_FILE="android_res/$VALUE_DIR/smartisan_strings.xml"
    fi

    #echo "---------: $ANDROID_STRING_FILE"
    updateString "$line"
    #sleep 0.5

done < $1

failedCount=`wc -l $STRING_UPDATED_ERROR_LOG | cut -d ' ' -f1`
if test "$failedCount" -gt 1;then
    echo 'Please check the error logfile:' $STRING_UPDATED_ERROR_LOG
    #cat $STRING_UPDATED_ERROR_LOG
fi
failedCount=`wc -l $STRING_UPDATED_IGNORE_LOG | cut -d ' ' -f1`
if test "$failedCount" -gt 1;then
    echo 'Please check the ignore logfile:' $STRING_UPDATED_IGNORE_LOG
    #cat $STRING_UPDATED_IGNORE_LOG
fi
echo "~~ Update Strings Done~~"
exit 0
#--------------------------------------------------------------------------------------
